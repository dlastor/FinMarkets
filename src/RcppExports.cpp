// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// computeKAMA
NumericVector computeKAMA(NumericVector alpha, NumericVector alphaComplement, NumericVector KAMA, NumericVector price);
RcppExport SEXP _FinMarkets_computeKAMA(SEXP alphaSEXP, SEXP alphaComplementSEXP, SEXP KAMASEXP, SEXP priceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alphaComplement(alphaComplementSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type KAMA(KAMASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type price(priceSEXP);
    rcpp_result_gen = Rcpp::wrap(computeKAMA(alpha, alphaComplement, KAMA, price));
    return rcpp_result_gen;
END_RCPP
}
// computeFRAMA
NumericVector computeFRAMA(NumericVector alpha, NumericVector alphaComplement, NumericVector FRAMA, NumericVector price);
RcppExport SEXP _FinMarkets_computeFRAMA(SEXP alphaSEXP, SEXP alphaComplementSEXP, SEXP FRAMASEXP, SEXP priceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alphaComplement(alphaComplementSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type FRAMA(FRAMASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type price(priceSEXP);
    rcpp_result_gen = Rcpp::wrap(computeFRAMA(alpha, alphaComplement, FRAMA, price));
    return rcpp_result_gen;
END_RCPP
}
// computeItrend
NumericVector computeItrend(NumericVector price, NumericVector iTrend, NumericVector alpha);
RcppExport SEXP _FinMarkets_computeItrend(SEXP priceSEXP, SEXP iTrendSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type price(priceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type iTrend(iTrendSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(computeItrend(price, iTrend, alpha));
    return rcpp_result_gen;
END_RCPP
}
// computeVIDA
NumericVector computeVIDA(NumericVector k, NumericVector price, NumericVector filt, NumericVector consts);
RcppExport SEXP _FinMarkets_computeVIDA(SEXP kSEXP, SEXP priceSEXP, SEXP filtSEXP, SEXP constsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type k(kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type price(priceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type filt(filtSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type consts(constsSEXP);
    rcpp_result_gen = Rcpp::wrap(computeVIDA(k, price, filt, consts));
    return rcpp_result_gen;
END_RCPP
}
// Ver
NumericVector Ver(NumericVector x);
RcppExport SEXP _FinMarkets_Ver(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Ver(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FinMarkets_computeKAMA", (DL_FUNC) &_FinMarkets_computeKAMA, 4},
    {"_FinMarkets_computeFRAMA", (DL_FUNC) &_FinMarkets_computeFRAMA, 4},
    {"_FinMarkets_computeItrend", (DL_FUNC) &_FinMarkets_computeItrend, 3},
    {"_FinMarkets_computeVIDA", (DL_FUNC) &_FinMarkets_computeVIDA, 4},
    {"_FinMarkets_Ver", (DL_FUNC) &_FinMarkets_Ver, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_FinMarkets(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
